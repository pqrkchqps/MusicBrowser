import gclient_utils
import os

path = gclient_utils.FindGclientRoot(os.getcwd())
execfile(os.path.join(path, 'dartium.deps', 'DEPS.chromium')) # Include proper Chromium DEPS.

# Now we need to override some settings and add some new ones.

vars.update({
  "chromium_url": "http://src.chromium.org/svn",
  "chromium_revision": "194114",
  # The Dart repository URL is pulled out here so that it can be easily
  # updated to "https" for committers.
  "dart_branch": "/branches/bleeding_edge",
  "multivm_url": "http://src.chromium.org/multivm/trunk",
  "dartium_webkit_trunk": "http://src.chromium.org/multivm/trunk/webkit",
  "dartium_webkit_revision": "1197",
  "dartium_tools_revision": "1192",
})

def massage_deps(deps):
  for key, value in deps.items():
    if value is None: continue

    if value.startswith('/trunk'):
      deps[key] = Var("chromium_url") + value
      continue

    if value.startswith(Var("webkit_trunk")):
      path, revision = value.split('@') # and svn revision.
      path = path[len(Var("webkit_trunk")):]  # Strip WebKit repo.
      value = Var("dartium_webkit_trunk") + path + '@' + Var("dartium_webkit_revision")
      deps[key] = value
      continue

massage_deps(deps)
for os_deps in deps_os.values():
  massage_deps(os_deps)

deps.update({
  "src":
    Var("chromium_url") + "/trunk/src@" + Var("chromium_revision"),

  "src/dart":
    Var("dart_branch") + "/dart",

  "src/dartium_tools":
    Var("multivm_url") + "/tools@" + Var("dartium_tools_revision"),
})

hooks[0:0] = [{
    "pattern": ".",
    "action": ["python", "src/dartium_tools/export_overrides.py"],
  },
  {
    "pattern": "dart",
    "action": ["python", "src/dartium_tools/generate_dart_vm_version.py"],
  }]
